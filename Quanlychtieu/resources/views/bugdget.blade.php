<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Qu·∫£n L√Ω Ng√¢n S√°ch</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background: linear-gradient(135deg, #f9fafc, #e8ecf3);
            margin: 0;
        }

        header {
                position: fixed; /* Gi·ªØ c·ªë ƒë·ªãnh */
    top: 0; /* ƒê·∫∑t ·ªü tr√™n c√πng */
    left: 0; /* CƒÉn b√™n tr√°i */
    width: 100%; /* Ph·ªß to√†n b·ªô chi·ªÅu ngang */
    height: 60px; /* Chi·ªÅu cao c·ªßa header */
    background: linear-gradient(135deg, #4e54c8, #8f94fb);
    color: white;
    display: flex;
    justify-content: flex-end;
    align-items: center;
    padding: 0 20px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    z-index: 1000; /* ∆Øu ti√™n hi·ªÉn th·ªã tr√™n c√°c th√†nh ph·∫ßn kh√°c */
    }

    header .user-menu {
        display: flex;
        align-items: center;
        gap: 10px;
        cursor: pointer;
    }

    header .user-menu span {
        font-weight: bold;
    }

    header .user-menu i {
        font-size: 1.2rem;
    }
    #dropdown-menu {
    position: absolute;
    top: 60px;
    right: 20px;
    background: linear-gradient(135deg, #ffffff, #f7f9fc); /* Gradient nh·∫π */
    border-radius: 12px; /* G√≥c bo tr√≤n l·ªõn h∆°n */
    box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1); /* ƒê·ªï b√≥ng m·ªÅm m·∫°i */
    display: none; /* ·∫®n dropdown m·∫∑c ƒë·ªãnh */
    z-index: 1001; /* ƒê·∫£m b·∫£o hi·ªÉn th·ªã tr√™n m·ªçi ph·∫ßn t·ª≠ */
    overflow: hidden; /* C·∫Øt c√°c ph·∫ßn th·ª´a n·∫øu c√≥ */
    border: 1px solid #e0e0e0; /* ƒê∆∞·ªùng vi·ªÅn tinh t·∫ø */
}

#dropdown-menu ul {
    list-style: none;
    margin: 0;
    padding: 0;
}

#dropdown-menu ul li {
    padding: 12px 16px;
    display: flex;
    align-items: center;
    gap: 12px;
    cursor: pointer;
    transition: background 0.3s, transform 0.2s;
    color: #4e54c8;
    font-size: 14px;
    font-weight: 500;
    text-decoration: none; /* B·ªè g·∫°ch d∆∞·ªõi */
}

#dropdown-menu ul li a {
    color: inherit; /* K·∫ø th·ª´a m√†u ch·ªØ t·ª´ li */
    text-decoration: none; /* B·ªè g·∫°ch d∆∞·ªõi */
    display: flex;
    align-items: center;
    gap: 8px;
}

#dropdown-menu ul li:hover {
    background: linear-gradient(135deg, #8f94fb, #4e54c8);
    color: #ffffff;
    transform: translateX(5px);
}

#dropdown-menu ul li i {
    font-size: 18px;
    color: #8f94fb;
    transition: color 0.3s;
}

#dropdown-menu ul li:hover i {
    color: #ffffff;
}


            /* Sidebar Navigation */
            nav {
                background: linear-gradient(135deg, #4e54c8, #8f94fb);
                /* Gradient t√≠m xanh nh·∫π */
                color: white;
                width: 220px;
                height: 100vh;
                box-shadow: 4px 0 6px rgba(0, 0, 0, 0.1);
                position: fixed;
                top: 60px;
                left: 0;
                padding: 20px;
                z-index: 10;
            }

        nav .nav-link {
            color: white;
            margin-bottom: 15px;
            font-weight: 500;
            padding: 12px 16px;
            border-radius: 8px;
            transition: background 0.3s, transform 0.3s;
        }

        nav .nav-link:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateX(10px);
        }

        nav .nav-link.active {
            background: rgba(255, 255, 255, 0.4);
            font-weight: bold;
        }
        /* Month Navigation */
        #prev-budget-month,
            #next-budget-month {
                font-size: 30px;
                color: #4e54c8;
                cursor: pointer;
                transition: color 0.3s, transform 0.3s;
            }

            #prev-budget-month:hover,
            #next-budget-month:hover {
                color: #3b3ccf;
                transform: scale(1.2);
            }

          
        .main-content {
                margin-left: 240px;
                /* Space for fixed sidebar */
                padding-top: 60px;
                overflow-y: auto;
                height: 100vh;
                background: linear-gradient(135deg, #ffffff, #f2f6fc);
                /* M√†u n·ªÅn s√°ng tinh t·∫ø */
            }

            .container {
                background: white;
                padding: 25px;
                border-radius: 12px;
                box-shadow: 0 6px 10px rgba(0, 0, 0, 0.15);
                max-width: 900px;
                margin: auto;
            }

        .card {
            border: none;
            border-radius: 12px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .btn-primary {
            background: linear-gradient(135deg, #4e54c8, #8f94fb);
            border: none;
            font-weight: bold;
        }

        .section-title {
            font-size: 1.5rem;
            color: #4e54c8;
            margin-bottom: 1rem;
        }

        .progress {
            height: 20px;
            border-radius: 10px;
        }
    </style>
</head>

<body>
    <!-- Sidebar Navigation -->
    <nav>
            <ul class="nav flex-column">
                <li class="nav-item"><a href="dashboard.blade.php" class="nav-link">Dashboard</a></li>
                <li class="nav-item"><a href="expense.blade.php" class="nav-link">Thu chi</a></li>
                <li class="nav-item"><a href="transaction.blade.php" class="nav-link">S·ªï giao d·ªãch</a></li>
                <li class="nav-item"><a href="remind.blade.php" class="nav-link">Nh·∫Øc nh·ªü</a></li>
                <li class="nav-item"><a href="bugdget.blade.php" class="nav-link active">Ng√¢n s√°ch</a></li>
                <li class="nav-item"><a href="setting.blade.php" class="nav-link">C√†i ƒë·∫∑t</a></li>
            </ul>
        </nav>
        <header>
        <div class="user-menu" id="user-menu">
            <i class="bi bi-person-circle"></i>
            <span id="user-name"style="margin-left: 10px;"></span>
            
        </div>
        <div id="dropdown-menu">
            <ul>
                <li><i class="bi bi-person-circle"></i> <a href="#">Th√¥ng tin t√†i kho·∫£n</a></li>
                <li><i class="bi bi-lock"></i> <a href="#">ƒê·ªïi m·∫≠t kh·∫©u</a></li>
                <li onclick="logout()"><i class="bi bi-box-arrow-right"></i> ƒêƒÉng xu·∫•t</li>
            </ul>
        </div>
    </header>
    <!-- Main Content -->
    <div class="main-content">
        <!-- Budget Section -->
         <div class="container">
         <div class="month-navigation d-flex justify-content-between align-items-center mb-4">
    <span id="prev-budget-month">&lt;</span>
    <h2 id="current-budget-month">Th√°ng 1, 2025</h2>
    <span id="next-budget-month">&gt;</span>
</div>

         <section id="budget-section">
            <h2 class="section-title">Qu·∫£n L√Ω Ng√¢n S√°ch</h2>
            <div class="card mb-4">
                <div class="card-body">
                    <form id="budget-form">
                        <div class="mb-3">
                            <label for="budget-category" class="form-label">Danh m·ª•c</label>
                            <select class="form-select" id="budget-category" required>
                                        <option value="" selected disabled>Ch·ªçn danh m·ª•c</option>
                                        <option value="üçî ƒÇn u·ªëng">üçî ƒÇn u·ªëng</option>
                                        <option value="üõçÔ∏è Mua s·∫Øm">üõçÔ∏è Mua s·∫Øm</option>
                                        <option value="üéÆ Gi·∫£i tr√≠">üéÆ Gi·∫£i tr√≠</option>
                                        <option value="üìö H·ªçc t·∫≠p">üìö H·ªçc t·∫≠p</option>
                                        <option value="üõí Ch·ª£, si√™u th·ªã">üõí Ch·ª£, si√™u th·ªã</option>
                                        <option value="üöó Di chuy·ªÉn">üöó Di chuy·ªÉn</option>
                                        <option value="üíÖ L√†m ƒë·∫πp">üíÖ L√†m ƒë·∫πp</option>
                                        <option value="‚ù§Ô∏è S·ª©c kh·ªèe">‚ù§Ô∏è S·ª©c kh·ªèe</option>
                                        <option value="üéÅ T·ª´ thi·ªán">üéÅ T·ª´ thi·ªán</option>
                                        <option value="üí≥ Tr·∫£ n·ª£">üí≥ Tr·∫£ n·ª£</option>
                                        <option value="üßæ H√≥a ƒë∆°n">üßæ H√≥a ƒë∆°n</option>
                                        <option value="üè† Nh√† c·ª≠a">üè† Nh√† c·ª≠a</option>
                                        <option value="üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Ng∆∞·ªùi th√¢n">üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Ng∆∞·ªùi th√¢n</option>

                                    </select>
                        </div>
                        <div class="mb-3">
                            <label for="budget-amount" class="form-label">S·ªë ti·ªÅn</label>
                            <input type="text" class="form-control" id="budget-amount" placeholder="Nh·∫≠p s·ªë ti·ªÅn" required>
                        </div>
                        <button type="submit" class="btn btn-primary">L∆∞u Ng√¢n S√°ch</button>
                    </form>
                </div>
            </div>

            <!-- Budget Display -->
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">ƒê·∫∑t ng√¢n s√°ch</h5>
                    <ul id="budget-list" class="list-group">
                    </ul>
                    <div id="budget-alert" class="mt-3"></div> <!-- N∆°i hi·ªÉn th·ªã c·∫£nh b√°o -->
                </div>
            </div>
        </section>

        <!-- Forecast Section -->
        <section id="forecast-section" class="mt-5">
            <h2 class="section-title">D·ª± B√°o Chi Ti√™u</h2>
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">D·ª± B√°o H√†ng Th√°ng</h5>
                    <ul id="forecast-list" class="list-group">
                    </ul>
                </div>
            </div>
        </section>

        <!-- Goals Section -->
        <section id="goal-section" class="mt-5">
            <h2 class="section-title">M·ª•c Ti√™u T√†i Ch√≠nh</h2>
            <div class="card mb-4">
                <div class="card-body">
                    <h5 class="card-title">Thi·∫øt L·∫≠p M·ª•c Ti√™u</h5>
                    <form id="goal-form">
                        <div class="mb-3">
                            <label for="goal-name" class="form-label">T√™n M·ª•c Ti√™u</label>
                            <input type="text" class="form-control" id="goal-name" placeholder="V√≠ d·ª•: Mua nh√†" required>
                        </div>
                        <div class="mb-3">
                            <label for="goal-amount" class="form-label">S·ªë Ti·ªÅn (VND)</label>
                            <input type="number" class="form-control" id="goal-amount" placeholder="Nh·∫≠p s·ªë ti·ªÅn" required>
                        </div>
                        <button type="submit" class="btn btn-primary">L∆∞u M·ª•c Ti√™u</button>
                    </form>
                </div>
            </div>

            <!-- Goals Display -->
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Danh S√°ch M·ª•c Ti√™u</h5>
                    <ul id="goal-list" class="list-group">
                    </ul>
                </div>
            </div>
        </section>
         </div>
    
    </div>

    <script>
        
        const budgetForm = document.getElementById('budget-form');
const budgetList = document.getElementById('budget-list');
const budgetAlert = document.getElementById('budget-alert');

// Danh s√°ch c√°c icon t∆∞∆°ng ·ª©ng v·ªõi c√°c danh m·ª•c
const categoryIcons = {
    "üçî|ƒÇn u·ªëng": "üçî",
    "üõçÔ∏è|Mua s·∫Øm": "üõçÔ∏è",
    "üéÆ|Gi·∫£i tr√≠": "üéÆ",
    "üìö|H·ªçc t·∫≠p": "üìö",
    "üõí|Ch·ª£, si√™u th·ªã": "üõí",
    "üöó|Di chuy·ªÉn": "üöó",
    "üíÖ|L√†m ƒë·∫πp": "üíÖ",
    "‚ù§Ô∏è|S·ª©c kh·ªèe": "‚ù§Ô∏è",
    "üéÅ|T·ª´ thi·ªán": "üéÅ",
    "üí≥|Tr·∫£ n·ª£": "üí≥",
    "üßæ|H√≥a ƒë∆°n": "üßæ",
    "üè†|Nh√† c·ª≠a": "üè†",
    "üë®‚Äçüë©‚Äçüëß‚Äçüë¶|Ng∆∞·ªùi th√¢n": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶",
};

// D·ªØ li·ªáu th√°ng
const months = [
    "Th√°ng 1", "Th√°ng 2", "Th√°ng 3", "Th√°ng 4", "Th√°ng 5", "Th√°ng 6",
    "Th√°ng 7", "Th√°ng 8", "Th√°ng 9", "Th√°ng 10", "Th√°ng 11", "Th√°ng 12"
];

let currentMonthIndex = new Date().getMonth() + 1; // Th√°ng b·∫Øt ƒë·∫ßu t·ª´ 1
let currentYear = new Date().getFullYear();

// H√†m hi·ªÉn th·ªã th√°ng hi·ªán t·∫°i
const renderMonthHeader = () => {
    const monthHeader = document.getElementById('current-budget-month');
    monthHeader.textContent = `${months[currentMonthIndex - 1]}, ${currentYear}`;
};



// G·∫Øn s·ª± ki·ªán chuy·ªÉn th√°ng
document.getElementById('prev-budget-month').addEventListener('click', () => switchMonth(-1));
document.getElementById('next-budget-month').addEventListener('click', () => switchMonth(1));

// H√†m ƒë·ªãnh d·∫°ng s·ªë ti·ªÅn
const formatCurrency = (amount) => {
    return amount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');  // Th√™m d·∫•u ph·∫©y ·ªü m·ªói ba ch·ªØ s·ªë
};

const formatCurrencyInput = (input) => {
    input.addEventListener('input', (e) => {
        let value = e.target.value.replace(/,/g, ''); // Lo·∫°i b·ªè d·∫•u ph·∫©y tr∆∞·ªõc
        if (!isNaN(value)) {
            e.target.value = value.replace(/\B(?=(\d{3})+(?!\d))/g, ','); // Th√™m d·∫•u ph·∫©y
        }
    });
};

const budgetAmountInput = document.getElementById('budget-amount');
formatCurrencyInput(budgetAmountInput);

const saveBudgetToLocalStorage = (category, formattedAmount) => {
    const budgets = JSON.parse(localStorage.getItem('budgets')) || {};
    const monthKey = `${currentMonthIndex}-${currentYear}`; // Kh√≥a x√°c ƒë·ªãnh th√°ng hi·ªán t·∫°i
    budgets[monthKey] = budgets[monthKey] || {};

    // Lo·∫°i b·ªè d·∫•u '|' tr∆∞·ªõc khi l∆∞u
    const cleanedCategory = category.replace('|', ' '); 
    budgets[monthKey][cleanedCategory] = formattedAmount;

    // L∆∞u l·∫°i v√†o localStorage
    localStorage.setItem('budgets', JSON.stringify(budgets));
};


const loadBudgetsFromLocalStorage = () => {
    const budgets = JSON.parse(localStorage.getItem('budgets')) || {};
    const monthKey = `${currentMonthIndex}-${currentYear}`; // L·∫•y kh√≥a th√°ng hi·ªán t·∫°i
    const monthBudgets = budgets[monthKey] || {}; // Ch·ªâ l·∫•y ng√¢n s√°ch c·ªßa th√°ng hi·ªán t·∫°i

    budgetList.innerHTML = '';
    for (const [category, amount] of Object.entries(monthBudgets)) {
        const li = document.createElement('li');
        li.className = 'list-group-item d-flex justify-content-between align-items-center';
        li.innerHTML = `<span>${category}</span><span>${formatCurrency(amount)} VND</span>`;
        budgetList.appendChild(li);
    }

    checkBudgetAndDisplayAlert();
};


const checkBudgetAndDisplayAlert = () => {
    const budgets = JSON.parse(localStorage.getItem('budgets')) || {};
    const categoryExpenses = JSON.parse(localStorage.getItem('categoryExpenses')) || {};
    const monthKey = `${currentMonthIndex}-${currentYear}`;
    const monthBudgets = budgets[monthKey] || {};

    let alertMessage = '';
    for (const [category, budgetAmount] of Object.entries(monthBudgets)) {
        const expenseAmount = parseFloat(categoryExpenses[monthKey]?.[category]?.replace(/,/g, '') || 0);
        if (expenseAmount > parseFloat(budgetAmount.replace(/,/g, ''))) {
            alertMessage += `<p>${category} v∆∞·ª£t ng√¢n s√°ch! 
                Chi ti√™u: <strong>${formatCurrency(expenseAmount)}</strong> VND, 
                Ng√¢n s√°ch: <strong>${formatCurrency(budgetAmount)}</strong> VND.</p>`;
        }
    }

    budgetAlert.innerHTML = alertMessage
        ? `<div class="alert alert-danger">${alertMessage}</div>`
        : '';
};



document.addEventListener('DOMContentLoaded', () => {
    renderMonthHeader();
    loadBudgetsFromLocalStorage();
    checkBudgetAndDisplayAlert();
});

budgetForm.addEventListener('submit', (e) => {
    e.preventDefault();
    const category = document.getElementById('budget-category').value;
    const amount = document.getElementById('budget-amount').value;
    saveBudgetToLocalStorage(category, amount);
    loadBudgetsFromLocalStorage();
    budgetForm.reset();
});
const getLastMonthKey = () => {
    let lastMonth = currentMonthIndex - 1;
    let lastYear = currentYear;
    if (lastMonth < 1) {
        lastMonth = 12;
        lastYear -= 1;
    }
    return `${lastMonth}-${lastYear}`;
};
const generateForecast = () => {
    const categoryExpenses = JSON.parse(localStorage.getItem('categoryExpenses')) || {};
    const lastMonthKey = getLastMonthKey(); // L·∫•y d·ªØ li·ªáu th√°ng tr∆∞·ªõc
    const lastMonthExpenses = categoryExpenses[lastMonthKey] || {};

    const forecastList = document.getElementById('forecast-list');
    forecastList.innerHTML = '';

    for (const [category, amount] of Object.entries(lastMonthExpenses)) {
        const expenseAmount = parseFloat(amount.replace(/,/g, '')) || 0;

        // T√πy ch·ªânh c√¥ng th·ª©c d·ª± b√°o (·ªü ƒë√¢y gi·ªØ nguy√™n m·ª©c chi ti√™u th√°ng tr∆∞·ªõc)
        const forecastAmount = expenseAmount; 

        const li = document.createElement('li');
        li.className = 'list-group-item d-flex justify-content-between align-items-center';
        li.innerHTML = `<span>${category}</span><span>${formatCurrency(forecastAmount)} VND</span>`;
        forecastList.appendChild(li);
    }
};

const addCustomCategoriesToDropdown = () => {
    const budgetCategoryDropdown = document.getElementById('budget-category');
    const savedCategories = JSON.parse(localStorage.getItem('customCategories')) || [];

    // L·ªçc ra c√°c danh m·ª•c ƒë√£ c·ªë ƒë·ªãnh ƒë·ªÉ tr√°nh tr√πng l·∫∑p
    const existingCategories = Array.from(budgetCategoryDropdown.options).map(option => option.textContent.trim());

    // Th√™m c√°c danh m·ª•c t·ª´ `localStorage`
    savedCategories.forEach(category => {
        if (category.type === 'expense') { // Ch·ªâ th√™m danh m·ª•c chi ti√™u
            const categoryText = `${category.icon} ${category.name}`;
            if (!existingCategories.includes(categoryText)) { // Ki·ªÉm tra xem ƒë√£ t·ªìn t·∫°i hay ch∆∞a
                const option = document.createElement('option');
                option.value = `${category.icon}|${category.name}`;
                option.textContent = categoryText;
                budgetCategoryDropdown.appendChild(option);
            }
        }
    });
};



// G·ªçi `checkBudgetAndDisplayAlert` khi c·∫ßn
document.addEventListener('DOMContentLoaded', () => {
    renderMonthHeader();
    loadBudgetsFromLocalStorage();
    checkBudgetAndDisplayAlert(); 
    addCustomCategoriesToDropdown();// Ki·ªÉm tra c·∫£nh b√°o khi t·∫£i trang
    generateForecast();
});

const switchMonth = (direction) => {
    currentMonthIndex += direction;
    if (currentMonthIndex < 1) {
        currentMonthIndex = 12;
        currentYear -= 1;
    } else if (currentMonthIndex > 12) {
        currentMonthIndex = 1;
        currentYear += 1;
    }

    renderMonthHeader(); // C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ th√°ng
    loadBudgetsFromLocalStorage(); // T·∫£i ng√¢n s√°ch cho th√°ng m·ªõi
    checkBudgetAndDisplayAlert(); // C·∫≠p nh·∫≠t c·∫£nh b√°o
    generateForecast();
};

document.addEventListener("DOMContentLoaded", () => {
    // Hi·ªÉn th·ªã t√™n ng∆∞·ªùi d√πng
    const userNameElem = document.getElementById("user-name");
    const currentUser = localStorage.getItem("currentUser");

    if (currentUser) {
        userNameElem.textContent = currentUser;
    } else {
        userNameElem.textContent = "Kh√°ch";
    }

    // Hi·ªÉn th·ªã v√† ·∫©n menu dropdown
    const userMenu = document.getElementById("user-menu");
    const dropdownMenu = document.getElementById("dropdown-menu");

    userMenu.addEventListener("click", () => {
        const isVisible = dropdownMenu.style.display === "block";
        dropdownMenu.style.display = isVisible ? "none" : "block";
    });

    document.addEventListener("click", (event) => {
        if (!userMenu.contains(event.target) && !dropdownMenu.contains(event.target)) {
            dropdownMenu.style.display = "none";
        }
    });
});

// ƒêƒÉng xu·∫•t
function logout() {
    localStorage.removeItem("currentUser");
    alert("B·∫°n ƒë√£ ƒëƒÉng xu·∫•t!");
    window.location.href = "login.blade.php";
}

    </script>
</body>

</html>
