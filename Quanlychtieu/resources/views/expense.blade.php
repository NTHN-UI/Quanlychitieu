<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Enhanced Personal Finance Dashboard</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">

    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background: linear-gradient(135deg, #f8f9fa, #e3e7ed);
            margin: 0;
            height: 100vh;
        }

        nav {
            background: linear-gradient(135deg, #4e54c8, #8f94fb);
            /* Gradient t√≠m xanh nh·∫π */
            color: white;
            width: 220px;
            height: 100vh;
            box-shadow: 4px 0 6px rgba(0, 0, 0, 0.1);
            position: fixed;
            top: 0;
            left: 0;
            padding: 20px;
            z-index: 10;
        }

        nav .nav-link {
            color: white;
            margin-bottom: 15px;
            font-weight: 500;
            padding: 12px 16px;
            border-radius: 8px;
            transition: background 0.3s, transform 0.3s;
        }

        nav .nav-link:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateX(10px);
        }

        nav .nav-link.active {
            background: rgba(255, 255, 255, 0.4);
            font-weight: bold;
        }

        .main-content {
            margin-left: 240px;
            /* Space for fixed sidebar */
            padding: 20px;
            overflow-y: auto;
            height: 100vh;
            background: linear-gradient(135deg, #ffffff, #f2f6fc);
            /* M√†u n·ªÅn s√°ng tinh t·∫ø */
        }

        .container {
            background: white;
            padding: 25px;
            border-radius: 12px;
            box-shadow: 0 6px 10px rgba(0, 0, 0, 0.15);
            max-width: 900px;
            margin: auto;
        }

        .card {
            border: none;
            border-radius: 12px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .btn-primary {
            background: linear-gradient(135deg, #4e54c8, #8f94fb);
            border: none;
            font-weight: bold;
        }

        .btn-primary:hover {
            background: linear-gradient(135deg, #3b3ccf, #4e54c8);
        }


        .recent-categories span {
            background: rgba(0, 0, 0, 0.05);
            padding: 3px 10px;
            border-radius: 15px;
            margin-right: 5px;
            cursor: pointer;
        }

        .recent-categories span:hover {
            background: rgba(0, 0, 0, 0.1);
        }

        #prev-month,
        #next-month {
            font-size: 24px;
            color: #4e54c8;
            cursor: pointer;
        }

        #prev-month:hover,
        #next-month:hover {
            color: #3b3ccf;
        }

        .tab-content {
            margin-top: 20px;
        }

        .form-control {
            border-radius: 8px;
        }

        .form-select {
            border-radius: 8px;
        }

        #create-new {
            background: rgba(255, 255, 255, 255);
            color: black;
            border: none;
            width: 120px;
            border-radius: 6px;
            padding: 6px 8px;
            display: flex;
            align-items: center;
            cursor: pointer;
            font-weight: bold;
            /* L√†m ch·ªØ in ƒë·∫≠m */
            transition: all 0.3s ease;
            /* Hi·ªáu ·ª©ng m∆∞·ª£t khi hover */
            justify-content: center;
        }

        .create-new-income {
            background: rgba(255, 255, 255, 255);
            color: black;
            border: none;
            width: 120px;
            border-radius: 6px;
            padding: 6px 8px;
            display: flex;
            align-items: center;
            cursor: pointer;
            font-weight: bold;
            /* L√†m ch·ªØ in ƒë·∫≠m */
            transition: all 0.3s ease;
            /* Hi·ªáu ·ª©ng m∆∞·ª£t khi hover */
            justify-content: center;
        }

        #create-new:hover {
            background: rgba(200, 200, 200, 0.8);
            /* N·ªÅn x√°m nh·∫°t khi hover */
        }


        .icon-picker {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            /* Kho·∫£ng c√°ch gi·ªØa c√°c bi·ªÉu t∆∞·ª£ng */
            padding: 10px;
            max-height: 200px;
            /* Gi·ªõi h·∫°n chi·ªÅu cao */
            overflow-y: auto;
            /* Th√™m thanh cu·ªôn d·ªçc */
            justify-content: center;
        }

        /* Bi·ªÉu t∆∞·ª£ng */
        .icon-picker div {
            text-align: center;
            cursor: pointer;
            padding: 10px;
            border-radius: 5px;
            transition: transform 0.2s;
        }

        .icon-picker div:hover {
            background: #f0f0f0;
            /* N·ªÅn x√°m nh·∫°t khi hover */
            transform: scale(1.1);
            /* Ph√≥ng to nh·∫π khi hover */
        }
    </style>
</head>

<body>
    <!-- Sidebar Navigation -->
    <nav>
        <ul class="nav flex-column">
            <li class="nav-item"><a href="dashboard.blade.php" class="nav-link ">Dashboard</a></li>
            <li class="nav-item"><a href="expense.blade.php" class="nav-link active ">Chi ti√™u</a></li>
            <li class="nav-item"><a href="transaction.blade.php" class="nav-link">S·ªï giao d·ªãch</a></li>
            <li class="nav-item"><a href="remind.blade.php" class="nav-link">Nh·∫Øc nh·ªü</a></li>
            <li class="nav-item"><a href="bugdget.blade.php" class="nav-link">Ng√¢n s√°ch</a></li>
            <li class="nav-item"><a href="setting.blade.php" class="nav-link">C√†i ƒë·∫∑t</a></li>
        </ul>
    </nav>
    <div class="main-content">
        <div class="container">
            <h2 class="mb-4">Qu·∫£n l√Ω chi ti√™u c√° nh√¢n</h2>
            <!-- Tab Navigation -->
            <ul class="nav nav-tabs" id="transaction-tabs" role="tablist">
                <li class="nav-item">
                    <button class="nav-link active" id="expense-tab" data-bs-toggle="tab" data-bs-target="#expense" type="button" role="tab" aria-controls="expense" aria-selected="true">Chi ti√™u</button>
                </li>
                <li class="nav-item">
                    <button class="nav-link" id="income-tab" data-bs-toggle="tab" data-bs-target="#income" type="button" role="tab" aria-controls="income" aria-selected="false">Thu nh·∫≠p</button>
                </li>
            </ul>

            <!-- Tab Content -->
            <div class="tab-content" id="transaction-tabContent">
                <!-- Expense Tab -->
                <div class="tab-pane fade show active" id="expense" role="tabpanel" aria-labelledby="expense-tab">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Th√™m Chi Ti√™u</h5>
                            <form id="expense-form">
                                <div class="mb-3">
                                    <label for="expense-amount" class="form-label">S·ªë ti·ªÅn</label>
                                    <input type="text" class="form-control" id="expense-amount" placeholder="" required>
                                </div>
                                <div class="mb-3">
                                    <label for="expense-category" class="form-label">Danh m·ª•c</label>
                                    <select class="form-select" id="expense-category" required>
                                        <option value="" selected disabled>Ch·ªçn danh m·ª•c</option>
                                        <option value="üçî|ƒÇn u·ªëng">üçî ƒÇn u·ªëng</option>
                                        <option value="üõçÔ∏è|Mua s·∫Øm">üõçÔ∏è Mua s·∫Øm</option>
                                        <option value="üéÆ|Gi·∫£i tr√≠">üéÆ Gi·∫£i tr√≠</option>
                                        <option value="üìö|H·ªçc t·∫≠p">üìö H·ªçc t·∫≠p</option>
                                        <option value="üõí|Ch·ª£, si√™u th·ªã">üõí Ch·ª£, si√™u th·ªã</option>
                                        <option value="üöó|Di chuy·ªÉn">üöó Di chuy·ªÉn</option>
                                        <option value="üíÖ|L√†m ƒë·∫πp">üíÖ L√†m ƒë·∫πp</option>
                                        <option value="‚ù§Ô∏è|S·ª©c kh·ªèe">‚ù§Ô∏è S·ª©c kh·ªèe</option>
                                        <option value="üéÅ|T·ª´ thi·ªán">üéÅ T·ª´ thi·ªán</option>
                                        <option value="üí≥|Tr·∫£ n·ª£">üí≥ Tr·∫£ n·ª£</option>
                                        <option value="üßæ|H√≥a ƒë∆°n">üßæ H√≥a ƒë∆°n</option>
                                        <option value="üè†|Nh√† c·ª≠a">üè† Nh√† c·ª≠a</option>
                                        <option value="üë®‚Äçüë©‚Äçüëß‚Äçüë¶|Ng∆∞·ªùi th√¢n">üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Ng∆∞·ªùi th√¢n</option>

                                    </select>

                                    <!-- Recent categories -->
                                    <div class="recent-categories" id="recent-expense-categories">
                                        <strong>Danh m·ª•c g·∫ßn ƒë√¢y: </strong>

                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label for="expense-date" class="form-label">Ng√†y giao d·ªãch</label>
                                    <input type="date" class="form-control" id="expense-date" required>
                                </div>
                                <div class="mb-3">
                                    <label for="expense-description" class="form-label">M√¥ t·∫£</label>
                                    <textarea class="form-control" id="expense-description" rows="3"></textarea>
                                </div>
                                <button type="submit" class="btn btn-primary">Th√™m Giao D·ªãch</button>
                            </form>
                        </div>
                    </div>
                </div>
                <div class="tab-pane fade" id="income" role="tabpanel" aria-labelledby="income-tab">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Th√™m Thu Nh·∫≠p</h5>
                            <form id="income-form">
                                <div class="mb-3">
                                    <label for="income-amount" class="form-label">S·ªë ti·ªÅn</label>
                                    <input type="text" class="form-control" id="income-amount" placeholder="" required>
                                </div>
                                <div class="mb-3">
                                    <label for="income-category" class="form-label">Danh m·ª•c</label>
                                    <select class="form-select" id="income-category" required>
                                        <option value="" selected disabled>Ch·ªçn danh m·ª•c</option>
                                        <option value="üíº|L∆∞∆°ng">üíº L∆∞∆°ng</option>
                                        <option value="üéÅ|Th∆∞·ªüng">üéÅ Th∆∞·ªüng</option>
                                        <option value="üíµ|Thu h·ªìi n·ª£">üíµ Thu h·ªìi n·ª£</option>
                                        <option value="üè¢|Kinh doanh">üè¢ Kinh doanh</option>
                                        <option value="üìä|L·ª£i nhu·∫≠n">üìä L·ª£i nhu·∫≠n</option>
                                        <option value="ü§ù|Tr·ª£ c·∫•p">ü§ù Tr·ª£ c·∫•p</option>
                                        <option value="üîß|Kh√°c">üîß Kh√°c</option>
                                    </select>
                                    <div class="recent-categories" id="recent-income-categories">
                                        <strong>Danh m·ª•c g·∫ßn ƒë√¢y: </strong>

                                    </div>
                                </div>

                                <div class="mb-3">
                                    <label for="income-date" class="form-label">Ng√†y giao d·ªãch</label>
                                    <input type="date" class="form-control" id="income-date" required>
                                </div>
                                <div class="mb-3">
                                    <label for="income-description" class="form-label">M√¥ t·∫£</label>
                                    <textarea class="form-control" id="income-description" rows="3"></textarea>
                                </div>
                                <button type="submit" class="btn btn-primary">Th√™m Giao D·ªãch</button>
                            </form>
                        </div>
                    </div>
                </div>
                <div id="category-modal" style="display: none; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0, 0, 0, 0.5); z-index: 9999; display: flex; justify-content: center; align-items: center;">
                    <div style="background: #f5f5f5; padding: 20px; border-radius: 10px; width: 90%; max-width: 500px;height:500px; box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);">
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                            <h5 style="margin: 0;">Ch·ªçn danh m·ª•c</h5>
                            <button id="close-modal" style="background: none; border: none; font-size: 20px; cursor: pointer;">√ó</button>
                        </div>
                        <div style="display: flex; justify-content: flex-end; align-items: center; margin-top: 10px;">
                            <button class="create-new" id="create-new">
                                <span style="font-size: 18px; margin-right: 5px;">+</span>
                                <span>T·∫°o m·ªõi</span>
                            </button>
                        </div>
                        <div style="margin-bottom: 20px;">
                            <h6 style="color: #f76c6c;">Chi ti√™u - sinh ho·∫°t</h6>
                            <div style="display: flex; gap: 10px; flex-wrap: wrap; margin-bottom: 10px;align-items: center;align-content: center">
                                <button style="background: #fce4ec; border: none; border-radius: 8px; padding: 10px; display: flex; flex-direction: column; align-items: center; cursor: pointer;">
                                    <span>üçî</span>
                                    <small>ƒÇn u·ªëng</small>
                                </button>
                                <button style="background: #e1f5fe; border: none; border-radius: 8px; padding: 10px; display: flex; flex-direction: column; align-items: center; cursor: pointer;">
                                    <span>üõí</span>
                                    <small>Ch·ª£, si√™u th·ªã</small>
                                </button>
                                <button style="background: #e8f5e9; border: none; border-radius: 8px; padding: 10px; display: flex; flex-direction: column; align-items: center; cursor: pointer;">
                                    <span>üöó</span>
                                    <small>Di chuy·ªÉn</small>
                                </button>
                            </div>
                        </div>

                        <div style="margin-bottom: 20px;">
                            <h6 style="color: #fbc02d;">Chi ph√≠ ph√°t sinh</h6>
                            <div style="display: flex; gap: 10px; flex-wrap: wrap; margin-bottom: 10px;align-items: center;align-content: center">
                                <button style="background: #fce4ec; border: none; border-radius: 8px; padding: 10px; display: flex; flex-direction: column; align-items: center; cursor: pointer;">
                                    <span>üõçÔ∏è</span>
                                    <small>Mua s·∫Øm</small>
                                </button>
                                <button style="background: #e1f5fe; border: none; border-radius: 8px; padding: 10px; display: flex; flex-direction: column; align-items: center; cursor: pointer;">
                                    <span>üéÆ</span>
                                    <small>Gi·∫£i tr√≠</small>
                                </button>
                                <button style="background: #f8bbd0; border: none; border-radius: 8px; padding: 10px; display: flex; flex-direction: column; align-items: center; cursor: pointer;">
                                    <span>üíÖ</span>
                                    <small>L√†m ƒë·∫πp</small>
                                </button>
                                </button>
                                <button style="background: #ffe0b2; border: none; border-radius: 8px; padding: 10px; display: flex; flex-direction: column; align-items: center; cursor: pointer; ">
                                    <span>‚ù§Ô∏è</span>
                                    <small>S·ª©c kh·ªèe</small>
                                </button>
                                <button style="background: #c5e1a5; border: none; border-radius: 8px; padding: 10px; display: flex; flex-direction: column; align-items: center; cursor: pointer; ">
                                    <span>üéÅ</span>
                                    <small>T·ª´ thi·ªán</small>
                                </button>
                            </div>
                        </div>

                        <div style="margin-bottom: 20px;">
                            <h6 style="color: #42a5f5;">Chi ph√≠ c·ªë ƒë·ªãnh</h6>
                            <div style="display: flex; gap: 10px; flex-wrap: wrap; margin-bottom: 10px;align-items: center;align-content: center;">
                                <button style="background: #ffccbc; border: none; border-radius: 8px; padding: 10px; display: flex; flex-direction: column; align-items: center; cursor: pointer; ">
                                    <span>üßæ</span>
                                    <small>H√≥a ƒë∆°n</small>
                                </button>
                                <button style="background: #bbdefb; border: none; border-radius: 8px; padding: 10px; display: flex; flex-direction: column; align-items: center; cursor: pointer;">
                                    <span>üè†</span>
                                    <small>Nh√† c·ª≠a</small>
                                </button>
                                <button style="background: #d1c4e9; border: none; border-radius: 8px; padding: 10px; display: flex; flex-direction: column; align-items: center; cursor: pointer;">
                                    <span>üë®‚Äçüë©‚Äçüëß‚Äçüë¶</span>
                                    <small>Ng∆∞·ªùi th√¢n</small>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                <div id="income-category-modal" style="display: none; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0, 0, 0, 0.5); z-index: 9999; display: flex; justify-content: center; align-items: center;">
                    <div style="background: #f5f5f5; padding: 20px; border-radius: 10px; width: 90%; max-width: 500px;height:500px; box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);">
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                            <h5 style="margin: 0;">Ch·ªçn danh m·ª•c thu nh·∫≠p</h5>
                            <button id="close-income-modal" style="background: none; border: none; font-size: 20px; cursor: pointer;">√ó</button>
                        </div>
                        <div style="display: flex; justify-content: flex-end; align-items: center; margin-top: 10px;">
                            <button class="create-new-income" id="create-new-income">
                                <span style="font-size: 18px; margin-right: 5px;">+</span>
                                <span>T·∫°o m·ªõi</span>
                            </button>
                        </div>
                        <div style="margin-bottom: 20px;">
                            <h6 style="color: #fbc02d;">Thu nh·∫≠p - l∆∞∆°ng</h6>
                            <div style="display: flex; gap: 10px; flex-wrap: wrap; margin-bottom: 10px; align-items: center; align-content: center">
                                <button style="background: #ffe0b2; border: none; border-radius: 8px; padding: 10px; display: flex; flex-direction: column; align-items: center; cursor: pointer;">
                                    <span>üíº</span>
                                    <small>L∆∞∆°ng</small>
                                </button>
                                <button style="background: #e1f5fe; border: none; border-radius: 8px; padding: 10px; display: flex; flex-direction: column; align-items: center; cursor: pointer;">
                                    <span>üéÅ</span>
                                    <small>Th∆∞·ªüng</small>
                                </button>
                                <button style="background: #c5e1a5; border: none; border-radius: 8px; padding: 10px; display: flex; flex-direction: column; align-items: center; cursor: pointer;">
                                    <span>üíµ</span>
                                    <small>Thu h·ªìi n·ª£</small>
                                </button>
                            </div>
                        </div>

                        <div style="margin-bottom: 20px;">
                            <h6 style="color: #42a5f5;">Thu nh·∫≠p - kh√°c</h6>
                            <div style="display: flex; gap: 10px; flex-wrap: wrap; margin-bottom: 10px; align-items: center; align-content: center">
                                <button style="background: #bbdefb; border: none; border-radius: 8px; padding: 10px; display: flex; flex-direction: column; align-items: center; cursor: pointer;">
                                    <span>üè¢</span>
                                    <small>Kinh doanh</small>
                                </button>
                                <button style="background: #fce4ec; border: none; border-radius: 8px; padding: 10px; display: flex; flex-direction: column; align-items: center; cursor: pointer;">
                                    <span>üìä</span>
                                    <small>L·ª£i nhu·∫≠n</small>
                                </button>
                                <button style="background: #d1c4e9; border: none; border-radius: 8px; padding: 10px; display: flex; flex-direction: column; align-items: center; cursor: pointer;">
                                    <span>ü§ù</span>
                                    <small>Tr·ª£ c·∫•p</small>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <div id="create-category-modal" style="display: none; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0, 0, 0, 0.5); z-index: 9999; justify-content: center; align-items: center;">
                    <div style="background: white; padding: 20px; border-radius: 12px; width: 90%; max-width: 400px; box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3); position: relative;">
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                            <h5 style="margin: 0;">T·∫°o danh m·ª•c</h5>
                            <button id="close-create-modal" style="background: none; border: none; font-size: 20px; cursor: pointer;">√ó</button>
                        </div>
                        <div>
                            <div style="position: relative;text-align: center; margin-bottom: 20px;">
                                <div style="text-align: center; margin-bottom: 10px;">
                                    <span class="category-icon-placeholder" style="font-size: 48px; color: #f76c6c;">üè†</span>
                                    <div id="open-icon-picker" style="color: #f76c6c; cursor: pointer;">Ch·ªçn bi·ªÉu t∆∞·ª£ng</div>
                                </div>
                                <div id="icon-picker-modal" style="position: absolute; top: 60px; left: 50%; transform: translateX(-50%); width: 300px; background: white; border: 1px solid rgb(204, 204, 204); border-radius: 12px; box-shadow: rgba(0, 0, 0, 0.3) 0px 5px 15px; z-index: 9999;">
                                    <div id="icon-picker" class="icon-picker">
                                    </div>
                                </div>
                                <div style="margin-bottom: 20px;text-align: left;">
                                    <label for="category-name" style="display: inline-block; margin-bottom: 5px; font-weight: bold;">T√™n danh m·ª•c <span style="color: red;">*</span></label>
                                    <input type="text" id="category-name" style="width: 100%; padding: 10px; border: 1px solid #ccc; border-radius: 5px;" placeholder="Nh·∫≠p t√™n">
                                </div>
                                <div style="margin-bottom: 20px;text-align: left;">
                                    <label for="parent-category" style="display: inline-block; margin-bottom: 5px; font-weight: bold;">Thu·ªôc danh m·ª•c <span style="color: red;">*</span></label>
                                    <select id="parent-category" style="width: 100%; padding: 10px; border: 1px solid #ccc; border-radius: 5px;">
                                        <option value="" selected disabled>Ch·ªçn</option>
                                        <option value="expense">Chi ti√™u</option>
                                        <option value="income">Thu nh·∫≠p</option>
                                    </select>
                                </div>
                                <button id="submit-category" style="width: 100%; padding: 10px; background: #f76c6c; color: white; border: none; border-radius: 5px; cursor: pointer;">X√°c nh·∫≠n</button>
                            </div>
                        </div>
                    </div>
                </div>
                <div id="create-category-modal-income" style="display: none; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0, 0, 0, 0.5); z-index: 9999; justify-content: center; align-items: center;">
                    <div style="background: white; padding: 20px; border-radius: 12px; width: 90%; max-width: 400px; box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3); position: relative;">
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                            <h5 style="margin: 0;">T·∫°o danh m·ª•c thu nh·∫≠p</h5>
                            <button id="close-create-modal-income" style="background: none; border: none; font-size: 20px; cursor: pointer;">√ó</button>
                        </div>
                        <div>
                            <div style="position: relative;text-align: center; margin-bottom: 20px;">
                                <div style="text-align: center; margin-bottom: 10px;">
                                    <span class="category-icon-placeholder-income" style="font-size: 48px; color: #f76c6c;">üí∞</span>
                                    <div id="open-icon-picker-income" style="color: #f76c6c; cursor: pointer;">Ch·ªçn bi·ªÉu t∆∞·ª£ng</div>
                                </div>
                                <div id="icon-picker-modal-income" style="position: absolute; top: 60px; left: 50%; transform: translateX(-50%); width: 300px; background: white; border: 1px solid rgb(204, 204, 204); border-radius: 12px; box-shadow: rgba(0, 0, 0, 0.3) 0px 5px 15px; z-index: 9999;">
                                    <div id="icon-picker-income" class="icon-picker">                                    </div>
                                </div>
                                <div style="margin-bottom: 20px;text-align: left;">
                                    <label for="category-name-income" style="display: inline-block; margin-bottom: 5px; font-weight: bold;">T√™n danh m·ª•c <span style="color: red;">*</span></label>
                                    <input type="text" id="category-name-income" style="width: 100%; padding: 10px; border: 1px solid #ccc; border-radius: 5px;" placeholder="Nh·∫≠p t√™n">
                                </div>
                                <div style="margin-bottom: 20px;text-align: left;">
                                    <label for="parent-category-income" style="display: inline-block; margin-bottom: 5px; font-weight: bold;">Thu·ªôc danh m·ª•c <span style="color: red;">*</span></label>
                                    <select id="parent-category-income" style="width: 100%; padding: 10px; border: 1px solid #ccc; border-radius: 5px;">
                                        <option value="" selected disabled>Ch·ªçn</option>
                                        <option value="expense">Chi ti√™u</option>
                                        <option value="income">Thu nh·∫≠p</option>
                                    </select>
                                </div>
                                <button id="submit-category-income" style="width: 100%; padding: 10px; background: #f76c6c; color: white; border: none; border-radius: 5px; cursor: pointer;">X√°c nh·∫≠n</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <script>
                document.addEventListener('DOMContentLoaded', () => {
                    const recentExpenseCategoriesElem = document.getElementById('recent-expense-categories');
                    const recentIncomeCategoriesElem = document.getElementById('recent-income-categories');
                    const MAX_RECENT_CATEGORIES = 5; 
                    const loadRecentCategories = (key) => {
                        return JSON.parse(localStorage.getItem(key)) || [];
                    };
                    const saveRecentCategory = (key, icon, category) => {
                        const recentCategories = loadRecentCategories(key);
                        const newCategory = `${icon} ${category}`;
                        const updatedCategories = recentCategories.filter(c => c !== newCategory);
                        updatedCategories.unshift(newCategory);
                        if (updatedCategories.length > MAX_RECENT_CATEGORIES) {
                            updatedCategories.pop();
                        }
                        localStorage.setItem(key, JSON.stringify(updatedCategories));
                    };
                    const renderRecentCategories = (key, element, categoryFieldId) => {
                        const recentCategories = loadRecentCategories(key);

                        if (recentCategories.length === 0) {
                            element.innerHTML = `<strong>Danh m·ª•c g·∫ßn ƒë√¢y:</strong> <em>Kh√¥ng c√≥ danh m·ª•c g·∫ßn ƒë√¢y</em>`;
                            return;
                        }
                        element.innerHTML = `<strong>Danh m·ª•c g·∫ßn ƒë√¢y:</strong> ${recentCategories
                .map(category => `<span style="cursor: pointer; margin-right: 5px;">${category}</span>`)
                .join('')}`;
                        element.querySelectorAll('span').forEach(span => {
                            span.addEventListener('click', () => {
                                const categoryText = span.textContent.trim();
                                const [icon, ...categoryParts] = categoryText.split(' ');
                                const category = categoryParts.join(' ');
                                document.getElementById(categoryFieldId).value = `${icon}|${category}`;
                            });
                        });
                    };
                    const formatCurrency = (input) => {
                        input.addEventListener('input', (e) => {
                            let value = e.target.value.replace(/[^\d]/g, ''); 
                            value = value.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
                            e.target.value = value;
                        });
                    };
                    const handleSubmit = (formId, type, recentCategoriesKey, recentCategoriesElem, categoryFieldId) => {
                        document.getElementById(formId).addEventListener('submit', function(e) {
                            e.preventDefault();
                            const amountInput = document.getElementById(`${type}-amount`);
                            const amountFormatted = amountInput.value.trim();
                            const amount = amountFormatted.replace(/,/g, ''); // Remove commas for storing
                            const date = document.getElementById(`${type}-date`).value.trim();
                            const categoryField = document.getElementById(categoryFieldId);
                            const categoryValue = categoryField.value; // L·∫•y gi√° tr·ªã danh m·ª•c
        const description = document.getElementById(`${type}-description`).value.trim();

        if (!categoryField) {
            alert('Danh m·ª•c kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ki·ªÉm tra l·∫°i.');
            return;
        }
        
                            if (!amount || !categoryValue || !date || !description) {
                                alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin.');
                                return;
                            }
                            const [icon, category] = categoryValue.split('|').map(item => item.trim());
                            saveRecentCategory(recentCategoriesKey, icon, category);

                            const transaction = {
                                type,
                                amount: amountFormatted, // Store with commas for consistency
                                category: category.trim(),
                                date,
                                description,
                                icon: icon.trim(),
                            };

                            const transactions = JSON.parse(localStorage.getItem('transactions')) || [];
                            transactions.push(transaction);
                            localStorage.setItem('transactions', JSON.stringify(transactions));

                            alert(`Giao d·ªãch ${type === 'expense' ? 'chi ti√™u' : 'thu nh·∫≠p'} ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!`);
                            e.target.reset(); 
                            renderRecentCategories(recentCategoriesKey, recentCategoriesElem, (selectedCategory) => {
                                document.getElementById(categoryFieldId).value = `${icon}|${category}`; // Set value in select
                            });
                        });
                    };

                    // Khi th√™m chi ti√™u
                    handleSubmit(
                        'expense-form',
                        'expense',
                        'recentExpenseCategories',
                        recentExpenseCategoriesElem,
                        'expense-category'
                    );

                    // Khi th√™m thu nh·∫≠p
                    handleSubmit(
                        'income-form',
                        'income',
                        'recentIncomeCategories',
                        recentIncomeCategoriesElem,
                        'income-category'
                    );

                    // L·∫ßn ƒë·∫ßu render danh m·ª•c g·∫ßn ƒë√¢y
                    renderRecentCategories('recentExpenseCategories', recentExpenseCategoriesElem, 'expense-category');
                    renderRecentCategories('recentIncomeCategories', recentIncomeCategoriesElem, 'income-category');


                    // ƒê·ªãnh d·∫°ng s·ªë ti·ªÅn cho c√°c tr∆∞·ªùng nh·∫≠p li·ªáu
                    formatCurrency(document.getElementById('expense-amount'));
                    formatCurrency(document.getElementById('income-amount'));
                });
                document.addEventListener('DOMContentLoaded', () => {
                    const modal = document.getElementById('category-modal'); // Modal
                    const closeModal = document.getElementById('close-modal'); // N√∫t ƒë√≥ng modal
                    const triggerElement = document.getElementById('expense-category'); // Ph·∫ßn t·ª≠ k√≠ch ho·∫°t modal
                    const createNewButton = document.getElementById('create-new'); // N√∫t T·∫°o m·ªõi
                    let clickTimer = null; // Timer ƒë·ªÉ ph√¢n bi·ªát gi·ªØa click v√† double-click

                    // ƒê·∫£m b·∫£o modal lu√¥n b·ªã ·∫©n khi t·∫£i trang
                    modal.style.display = 'none';

                    // L·∫Øng nghe s·ª± ki·ªán click 1 l·∫ßn v√† double-click
                    triggerElement.addEventListener('click', () => {
                        if (clickTimer !== null) {
                            // N·∫øu click th·ª© hai x·∫£y ra trong th·ªùi gian ng·∫Øn => double-click
                            clearTimeout(clickTimer); // X√≥a timer
                            clickTimer = null;

                            // Hi·ªÉn th·ªã modal khi double-click
                            modal.style.display = 'flex';
                        } else {
                            // N·∫øu ch·ªâ click 1 l·∫ßn
                            clickTimer = setTimeout(() => {
                                clickTimer = null; // Reset timer
                                console.log('Ch·ªçn danh m·ª•c b√¨nh th∆∞·ªùng'); // Ho·∫°t ƒë·ªông ch·ªçn b√¨nh th∆∞·ªùng
                            }, 300); // Th·ªùi gian ch·ªù ƒë·ªÉ x√°c ƒë·ªãnh double-click (300ms)
                        }
                    });

                    // Hi·ªÉn th·ªã modal khi nh·∫•n n√∫t "T·∫°o m·ªõi"
                    createNewButton.addEventListener('click', () => {
                        modal.style.display = 'flex';
                    });

                    // ƒê√≥ng modal khi nh·∫•n n√∫t "√ó"
                    closeModal.addEventListener('click', () => {
                        modal.style.display = 'none';
                    });

                    // ƒê√≥ng modal khi nh·∫•n ra ngo√†i modal
                    modal.addEventListener('click', (event) => {
                        if (event.target === modal) {
                            modal.style.display = 'none';
                        }
                    });
                });
                document.addEventListener('DOMContentLoaded', () => {
                    const createNewButton = document.getElementById('create-new'); // N√∫t T·∫°o m·ªõi
                    const createCategoryModal = document.getElementById('create-category-modal'); // Modal T·∫°o danh m·ª•c
                    const closeCreateModal = document.getElementById('close-create-modal'); // N√∫t ƒë√≥ng modal

                    // Hi·ªÉn th·ªã modal khi nh·∫•n n√∫t T·∫°o m·ªõi
                    createNewButton.addEventListener('click', () => {
                        createCategoryModal.style.display = 'flex';
                    });

                    // ƒê√≥ng modal khi nh·∫•n n√∫t ƒë√≥ng
                    closeCreateModal.addEventListener('click', () => {
                        createCategoryModal.style.display = 'none';
                    });

                    // ƒê√≥ng modal khi nh·∫•n ra ngo√†i modal
                    createCategoryModal.addEventListener('click', (event) => {
                        if (event.target === createCategoryModal) {
                            createCategoryModal.style.display = 'none';
                        }
                    });


                    expense.addEventListener('click', () => {
                        expense.style.borderBottom = '2px solid #f76c6c';
                        expense.style.color = '#f76c6c';
                        expense.style.fontWeight = 'bold';

                        income.style.borderBottom = '2px solid transparent';
                        income.style.color = '#999';
                        income.style.fontWeight = 'normal';
                    });

                    income.addEventListener('click', () => {
                        income.style.borderBottom = '2px solid #f76c6c';
                        income.style.color = '#f76c6c';
                        income.style.fontWeight = 'bold';

                        expense.style.borderBottom = '2px solid transparent';
                        expense.style.color = '#999';
                        expense.style.fontWeight = 'normal';
                    });
                });
                document.addEventListener('DOMContentLoaded', () => {
                    const iconPickerModal = document.getElementById('icon-picker-modal');
                    const openIconPicker = document.getElementById('open-icon-picker');
                    const iconPicker = document.getElementById('icon-picker');
                    const iconPlaceholder = document.querySelector('.category-icon-placeholder');
                    const submitCategoryButton = document.getElementById('submit-category');
                    const categoryNameInput = document.getElementById('category-name');
                    const parentCategorySelect = document.getElementById('parent-category');
                    const expenseCategoryDropdown = document.getElementById('expense-category'); // Dropdown danh m·ª•c chi ti√™u
                    const categoryModal = document.getElementById('create-category-modal');

                    const LOCAL_STORAGE_KEY = 'customCategories';

                    // Danh s√°ch bi·ªÉu t∆∞·ª£ng Unicode
                    const icons = [
                        'üí°', 'üíß', 'üì±', 'üì∫', 'üåê', 'üöï', 'üç±', 'üçø', 'üèãÔ∏è', 'üõå',
                        'üëó', 'üé®', 'üõ†Ô∏è', 'üîß', 'üêæ', 'üßπ', 'üßº', 'üì¶', 'üõ°Ô∏è', 'üíä',
                        'üåº', 'üçπ', 'üè¶', 'üîí', 'üèñÔ∏è', 'üõèÔ∏è', 'üé∂', 'üö¥', 'üñ•Ô∏è', 'üìö',
                        'üé§', 'üë∂', 'üéÑ', 'üõçÔ∏è'
                    ];

                    // Render danh s√°ch bi·ªÉu t∆∞·ª£ng
                    icons.forEach(icon => {
                        const iconElement = document.createElement('div');
                        iconElement.textContent = icon; // Hi·ªÉn th·ªã bi·ªÉu t∆∞·ª£ng
                        iconElement.setAttribute('data-icon', icon); // G√°n thu·ªôc t√≠nh `data-icon`
                        iconPicker.appendChild(iconElement);

                        // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn bi·ªÉu t∆∞·ª£ng
                        iconElement.addEventListener('click', () => {
                            iconPlaceholder.textContent = icon; // Hi·ªÉn th·ªã bi·ªÉu t∆∞·ª£ng ƒë√£ ch·ªçn
                            iconPlaceholder.setAttribute('data-icon', icon); // G√°n thu·ªôc t√≠nh `data-icon`
                            iconPickerModal.style.display = 'none'; // ƒê√≥ng modal
                        });
                    });

                    // Hi·ªÉn th·ªã modal ch·ªçn bi·ªÉu t∆∞·ª£ng
                    openIconPicker.addEventListener('click', () => {
                        iconPickerModal.style.display = 'flex';
                    });

                    // ƒê√≥ng modal khi click b√™n ngo√†i
                    document.addEventListener('click', (event) => {
                        if (!iconPickerModal.contains(event.target) && event.target !== openIconPicker) {
                            iconPickerModal.style.display = 'none';
                        }
                    });

                    // ƒê√≥ng modal b·∫±ng n√∫t ƒë√≥ng
                    document.getElementById('close-modal').addEventListener('click', () => {
                        iconPickerModal.style.display = 'none';
                    });

                    // X·ª≠ l√Ω khi nh·∫•n n√∫t "X√°c nh·∫≠n"
                    submitCategoryButton.addEventListener('click', () => {
                        const categoryName = categoryNameInput.value.trim();
                        const parentCategory = parentCategorySelect.value;
                        const icon = iconPlaceholder.getAttribute('data-icon'); // L·∫•y bi·ªÉu t∆∞·ª£ng ƒë√£ ch·ªçn

                        console.log('Category Name:', categoryName);
                        console.log('Parent Category:', parentCategory);
                        console.log('Icon:', icon);

                        if (!categoryName || !parentCategory || !icon) {
                            alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin.');
                            return;
                        }

                        // Ki·ªÉm tra danh m·ª•c c√≥ t·ªìn t·∫°i trong localStorage ch∆∞a
                        const savedCategories = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY)) || [];

                        // Ki·ªÉm tra xem danh m·ª•c ƒë√£ t·ªìn t·∫°i hay ch∆∞a (ki·ªÉm tra t√™n v√† lo·∫°i danh m·ª•c)
                        const categoryExists = savedCategories.some(category => {
                            return category.name.toLowerCase() === categoryName.toLowerCase() && category.type === parentCategory;
                        });

                        if (categoryExists) {
                            alert('Danh m·ª•c n√†y ƒë√£ t·ªìn t·∫°i. Vui l√≤ng ch·ªçn t√™n kh√°c.');
                            return;
                        }

                        // Ti·∫øn h√†nh l∆∞u danh m·ª•c v√†o localStorage n·∫øu ch∆∞a t·ªìn t·∫°i
                        savedCategories.push({
                            icon,
                            name: categoryName,
                            type: parentCategory
                        });

                        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(savedCategories));

                        // Th√™m danh m·ª•c m·ªõi v√†o danh s√°ch
                        const newOption = document.createElement('option');
                        newOption.value = `${icon}|${categoryName}`;
                        newOption.textContent = `${icon} ${categoryName}`;

                        // Th√™m v√†o dropdown n·∫øu danh m·ª•c l√† "expense"
                        if (parentCategory === 'expense') {
                            expenseCategoryDropdown.appendChild(newOption);
                        }

                        // Reset modal v√† form
                        categoryNameInput.value = '';
                        parentCategorySelect.value = '';
                        iconPlaceholder.textContent = ''; // X√≥a bi·ªÉu t∆∞·ª£ng ƒë√£ ch·ªçn
                        iconPlaceholder.removeAttribute('data-icon');
                        categoryModal.style.display = 'none';

                        alert('Danh m·ª•c m·ªõi ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!');
                        const createCategoryModal = document.getElementById('create-category-modal');
                        createCategoryModal.style.display = 'none';
                    });

                    // H√†m t·∫£i c√°c danh m·ª•c t·ª´ localStorage v√†o dropdown khi t·∫£i trang
                    const loadCategoriesFromLocalStorage = () => {
                        const savedCategories = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY)) || [];

                        savedCategories.forEach(category => {
                            const newOption = document.createElement('option');
                            newOption.value = `${category.icon}|${category.name}`;
                            newOption.textContent = `${category.icon} ${category.name}`;

                            // Th√™m v√†o ƒë√∫ng dropdown (chi ti√™u ho·∫∑c thu nh·∫≠p)
                            if (category.type === 'expense') {
                                expenseCategoryDropdown.appendChild(newOption);
                            }
                        });
                    };

                    // G·ªçi h√†m t·∫£i c√°c danh m·ª•c khi trang ƒë∆∞·ª£c t·∫£i
                    loadCategoriesFromLocalStorage();
                });
                //thu nh·∫≠p 
                document.addEventListener('DOMContentLoaded', () => {
                    const incomeCategoryDropdown = document.getElementById('income-category'); // Dropdown danh m·ª•c thu nh·∫≠p
                    const incomeCategoryModal = document.getElementById('income-category-modal'); // Modal danh m·ª•c thu nh·∫≠p
                    const closeModalButton = document.getElementById('close-income-modal'); // N√∫t ƒë√≥ng modal
                    const createNewButton = document.getElementById('create-new-income'); // N√∫t t·∫°o m·ªõi danh m·ª•c thu nh·∫≠p
                    let clickTimer = null;

                    // Ki·ªÉm tra tr·∫°ng th√°i modal t·ª´ localStorage khi t·∫£i l·∫°i trang
                    const modalState = localStorage.getItem('incomeCategoryModalState');
                    if (modalState === 'open') {
                        incomeCategoryModal.style.display = 'flex';
                    } else {
                        incomeCategoryModal.style.display = 'none';
                    }

                    // L·∫Øng nghe s·ª± ki·ªán click ƒë·ªÉ hi·ªÉn th·ªã modal danh m·ª•c thu nh·∫≠p (double-click)
                    incomeCategoryDropdown.addEventListener('click', () => {
                        if (clickTimer !== null) {
                            // N·∫øu click th·ª© hai trong th·ªùi gian ng·∫Øn => double-click
                            clearTimeout(clickTimer); // H·ªßy b·ªè timer
                            clickTimer = null;

                            // Hi·ªÉn th·ªã modal khi double-click
                            incomeCategoryModal.style.display = 'flex';

                            // L∆∞u tr·∫°ng th√°i modal v√†o localStorage
                            localStorage.setItem('incomeCategoryModalState', 'open');
                        } else {
                            // N·∫øu ch·ªâ click 1 l·∫ßn
                            clickTimer = setTimeout(() => {
                                clickTimer = null; // Reset timer
                                console.log('Ch·ªçn danh m·ª•c thu nh·∫≠p b√¨nh th∆∞·ªùng');
                            }, 300); // Ch·ªù 300ms ƒë·ªÉ ph√¢n bi·ªát click ƒë∆°n v√† double-click
                        }
                    });

                    // ƒê√≥ng modal khi nh·∫•n n√∫t "√ó"
                    closeModalButton.addEventListener('click', () => {
                        incomeCategoryModal.style.display = 'none';

                        // L∆∞u tr·∫°ng th√°i ƒë√≥ng modal v√†o localStorage
                        localStorage.setItem('incomeCategoryModalState', 'closed');
                    });

                    // ƒê√≥ng modal khi click ra ngo√†i modal
                    incomeCategoryModal.addEventListener('click', (event) => {
                        if (event.target === incomeCategoryModal) {
                            incomeCategoryModal.style.display = 'none';

                            // L∆∞u tr·∫°ng th√°i ƒë√≥ng modal v√†o localStorage
                            localStorage.setItem('incomeCategoryModalState', 'closed');
                        }
                    });

                    // X·ª≠ l√Ω khi nh·∫•n n√∫t "T·∫°o m·ªõi"
                    createNewButton.addEventListener('click', () => {
                        incomeCategoryModal.style.display = 'flex';

                        // L∆∞u tr·∫°ng th√°i modal khi m·ªü
                        localStorage.setItem('incomeCategoryModalState', 'open');
                    });
                });

                document.addEventListener('DOMContentLoaded', () => {
    const createNewButtonIncome = document.getElementById('create-new-income'); // N√∫t t·∫°o m·ªõi thu nh·∫≠p
    const createCategoryModalIncome = document.getElementById('create-category-modal-income'); // Modal t·∫°o danh m·ª•c thu nh·∫≠p
    const closeCreateModalIncome = document.getElementById('close-create-modal-income'); // N√∫t ƒë√≥ng modal thu nh·∫≠p

    // Hi·ªÉn th·ªã modal khi nh·∫•n n√∫t "T·∫°o m·ªõi"
    createNewButtonIncome.addEventListener('click', () => {
        createCategoryModalIncome.style.display = 'flex'; // Hi·ªÉn th·ªã modal
    });

    // ƒê√≥ng modal khi nh·∫•n n√∫t "√ó"
    closeCreateModalIncome.addEventListener('click', () => {
        createCategoryModalIncome.style.display = 'none'; // ·∫®n modal
    });

    // ƒê√≥ng modal khi nh·∫•n ra ngo√†i modal
    createCategoryModalIncome.addEventListener('click', (event) => {
        if (event.target === createCategoryModalIncome) {
            createCategoryModalIncome.style.display = 'none'; // ·∫®n modal n·∫øu click b√™n ngo√†i modal
        }
    });
});


                document.addEventListener('DOMContentLoaded', () => {
                    const iconPickerModalIncome = document.getElementById('icon-picker-modal-income');
                    const openIconPickerIncome = document.getElementById('open-icon-picker-income');
                    const iconPickerIncome = document.getElementById('icon-picker-income');
                    const iconPlaceholderIncome = document.querySelector('.category-icon-placeholder-income');
                    const submitCategoryButtonIncome = document.getElementById('submit-category-income');
                    const categoryNameInputIncome = document.getElementById('category-name-income');
                    const parentCategorySelectIncome = document.getElementById('parent-category-income');
                    const incomeCategoryDropdown = document.getElementById('income-category'); // Dropdown danh m·ª•c thu nh·∫≠p
                    const categoryModalIncome = document.getElementById('create-category-modal-income');
                    const INCOME_LOCAL_STORAGE_KEY = 'incomeCategories'; // Kh√≥a l∆∞u tr·ªØ thu nh·∫≠p

                    // Bi·ªÉu t∆∞·ª£ng cho thu nh·∫≠p
                    const incomeIcons = [
                        'üí∞', 'üí∏', 'üìà', 'üíº', 'üè†', 'üìä', 'üéâ', 'ü§ë', 'üíé', 'üëî', 'üè¶', 'üí≥', 'üéÅ'
                    ];

                    // Render bi·ªÉu t∆∞·ª£ng thu nh·∫≠p
                    incomeIcons.forEach(icon => {
                        const iconElement = document.createElement('div');
                        iconElement.textContent = icon;
                        iconElement.setAttribute('data-icon', icon);
                        iconPickerIncome.appendChild(iconElement);

                        iconElement.addEventListener('click', () => {
                            iconPlaceholderIncome.textContent = icon;
                            iconPlaceholderIncome.setAttribute('data-icon', icon);
                            iconPickerModalIncome.style.display = 'none';
                        });
                    });

                    // Hi·ªÉn th·ªã modal ch·ªçn bi·ªÉu t∆∞·ª£ng
                    openIconPickerIncome.addEventListener('click', () => {
                        iconPickerModalIncome.style.display = 'flex';
                    });

                    // ƒê√≥ng modal khi click b√™n ngo√†i
                    document.addEventListener('click', (event) => {
                        if (!iconPickerModalIncome.contains(event.target) && event.target !== openIconPickerIncome) {
                            iconPickerModalIncome.style.display = 'none';
                        }
                    });


                    // X·ª≠ l√Ω khi nh·∫•n n√∫t "X√°c nh·∫≠n"
                    // Th√™m s·ª± ki·ªán click cho n√∫t submit
                    submitCategoryButtonIncome.addEventListener('click', () => {
                        const categoryName = categoryNameInputIncome.value.trim();
                        const parentCategory = parentCategorySelectIncome.value;
                        const icon = iconPlaceholderIncome.getAttribute('data-icon');

                        if (!categoryName || !parentCategory || !icon) {
                            alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin.');
                            return;
                        }

                        const savedCategoriesIncome = JSON.parse(localStorage.getItem(INCOME_LOCAL_STORAGE_KEY)) || [];
                        const categoryExists = savedCategoriesIncome.some(category => category.name.toLowerCase() === categoryName.toLowerCase() && category.type === parentCategory);
                        if (categoryExists) {
                            alert('Danh m·ª•c n√†y ƒë√£ t·ªìn t·∫°i. Vui l√≤ng ch·ªçn t√™n kh√°c.');
                            return;
                        }

                        savedCategoriesIncome.push({
                            icon,
                            name: categoryName,
                            type: parentCategory
                        });

                        localStorage.setItem(INCOME_LOCAL_STORAGE_KEY, JSON.stringify(savedCategoriesIncome));

                        const newOptionIncome = document.createElement('option');
                        newOptionIncome.value = `${icon}|${categoryName}`;
                        newOptionIncome.textContent = `${icon} ${categoryName}`;
                        incomeCategoryDropdown.appendChild(newOptionIncome);

                        categoryNameInputIncome.value = '';
                        parentCategorySelectIncome.value = '';
                        iconPlaceholderIncome.textContent = '';
                        iconPlaceholderIncome.removeAttribute('data-icon');
                        categoryModalIncome.style.display = 'none';

                        alert('Danh m·ª•c thu nh·∫≠p m·ªõi ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!');
                        const createCategoryModalIncome = document.getElementById('create-category-modal-income');
                        createCategoryModalIncome.style.display = 'none';
                    });

                    // H√†m t·∫£i c√°c danh m·ª•c t·ª´ localStorage v√†o dropdown khi t·∫£i trang
                    const loadCategoriesFromLocalStorageIncome = () => {
                        const savedCategoriesIncome = JSON.parse(localStorage.getItem(INCOME_LOCAL_STORAGE_KEY)) || [];

                        savedCategoriesIncome.forEach(category => {
                            const newOptionIncome = document.createElement('option');
                            newOptionIncome.value = `${category.icon}|${category.name}`;
                            newOptionIncome.textContent = `${category.icon} ${category.name}`;
                            incomeCategoryDropdown.appendChild(newOptionIncome);
                        });
                    };

                    // G·ªçi h√†m t·∫£i c√°c danh m·ª•c khi trang ƒë∆∞·ª£c t·∫£i
                    loadCategoriesFromLocalStorageIncome();
                });

                
            </script>
</body>

</html>
